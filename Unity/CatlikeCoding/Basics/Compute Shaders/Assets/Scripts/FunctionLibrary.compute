#define KERNEL_FUNCTION(function) \
[numthreads(8,8,1)] \
void function##Kernel(uint3 id: SV_DispatchThreadID) \
{ \
    float2 uv = GetUV(id); \
    SetPosition(id, function(uv.x, uv.y, _Time)); \
}

#define KERNEL_MOPH_FUNCTION(functionA, functionB) \
[numthreads(8,8,1)] \
void functionA##To##functionB##Kernel(uint3 id: SV_DispatchThreadID) \
{ \
    float2 uv = GetUV(id); \
    float3 position = lerp( functionA(uv.x, uv.y, _Time), functionB(uv.x, uv.y, _Time), _TransitionProgress \
    );\
    SetPosition(id,position);\
}

#pragma kernel WaveKernel
#pragma kernel WaveToMultiWaveKernel
#pragma kernel WaveToRippleKernel
#pragma kernel WaveToSphereKernel
#pragma kernel WaveToPerturbSphereKernel
#pragma kernel WaveToTorusKernel
#pragma kernel WaveToPerturbTorusKernel

#pragma kernel MultiWaveToWaveKernel
#pragma kernel MultiWaveKernel
#pragma kernel MultiWaveToRippleKernel
#pragma kernel MultiWaveToSphereKernel
#pragma kernel MultiWaveToPerturbSphereKernel
#pragma kernel MultiWaveToTorusKernel
#pragma kernel MultiWaveToPerturbTorusKernel

#pragma kernel RippleToWaveKernel
#pragma kernel RippleToMultiWaveKernel
#pragma kernel RippleKernel
#pragma kernel RippleToSphereKernel
#pragma kernel RippleToPerturbSphereKernel
#pragma kernel RippleToTorusKernel
#pragma kernel RippleToPerturbTorusKernel

#pragma kernel SphereToWaveKernel
#pragma kernel SphereToMultiWaveKernel
#pragma kernel SphereToRippleKernel
#pragma kernel SphereKernel
#pragma kernel SphereToPerturbSphereKernel
#pragma kernel SphereToTorusKernel
#pragma kernel SphereToPerturbTorusKernel

#pragma kernel PerturbSphereToWaveKernel
#pragma kernel PerturbSphereToMultiWaveKernel
#pragma kernel PerturbSphereToRippleKernel
#pragma kernel PerturbSphereToSphereKernel
#pragma kernel PerturbSphereKernel
#pragma kernel PerturbSphereToTorusKernel
#pragma kernel PerturbSphereToPerturbTorusKernel

#pragma kernel TorusToWaveKernel
#pragma kernel TorusToMultiWaveKernel
#pragma kernel TorusToRippleKernel
#pragma kernel TorusToSphereKernel
#pragma kernel TorusToPerturbSphereKernel
#pragma kernel TorusKernel
#pragma kernel TorusToPerturbTorusKernel

#pragma kernel PerturbTorusToWaveKernel
#pragma kernel PerturbTorusToMultiWaveKernel
#pragma kernel PerturbTorusToRippleKernel
#pragma kernel PerturbTorusToSphereKernel
#pragma kernel PerturbTorusToPerturbSphereKernel
#pragma kernel PerturbTorusToTorusKernel
#pragma kernel PerturbTorusKernel

#define PI 3.1415926

RWStructuredBuffer<float3> _Positions;
uint _Resolution;
float _Step, _Time, _TransitionProgress;

float2 GetUV(uint3 id)
{
    float u = (id.x + 0.5) * _Step - 1.0;
    float v = (id.y + 0.5) * _Step - 1.0;
    return float2(u, v);
}

void SetPosition(uint3 id, float3 position)
{
    if (id.x < _Resolution && id.y < _Resolution)
        _Positions[id.x + id.y * _Resolution] = position;
}

float3 Wave(float u, float v, float t)
{
    float3 result;
    result.x = u;
    result.y = sin(PI * (u + v + t));
    result.z = v;
    return result;
}

float3 MultiWave(float u, float v, float t)
{
    float3 result;
    result.x = u;

    result.y = sin(PI * (u + 0.5 * t));
    result.y += 0.5 * sin(2.0 * PI * (v + t));
    result.y += sin(PI * (u + v + 0.25 * t));
    result.y *= (1.0 / 2.5f);
    result.z = v;

    return result;
}

float3 Ripple(float u, float v, float t)
{
    float distance = sqrt(u * u + v * v);
    float3 result;
    result.x = u;
    result.y = sin(PI * (4.0 * distance - t));
    result.y /= (1.0 * 10.0 + distance);
    result.z = v;
    return result;
}

float3 Sphere(float u, float v, float t)
{
    float3 result;
    float r = cos(0.5 * PI * v);
    result.x = r * sin(PI * u);
    result.y = sin(PI * v * 0.5f);
    result.z = r * cos(PI * u);
    return result;
}

float3 PerturbSphere(float u, float v, float t)
{
    float3 result;
    float r = 0.9 + 0.1 * sin(PI * (6.0 * u + 4.0 * v + t));
    float s = r * cos(0.5 * PI * v);
    result.x = s * sin(PI * u);
    result.y = r * sin(PI * v * 0.5);
    result.z = s * cos(PI * u);
    return result;
}

float3 Torus(float u, float v, float t)
{
    float3 result;
    float r1 = 0.75f;
    float r2 = 0.25f;

    float s = r1 + r2 * cos(PI * v);
    result.x = s * sin(PI * u);
    result.y = r2 * sin(PI * v);
    result.z = s * cos(PI * u);
    return result;
}

float3 PerturbTorus(float u, float v, float t)
{
    float3 result;
    float r1 = 0.7f + 0.1f * sin(PI * (6.0 * u + 0.5f * t));
    float r2 = 0.15f + 0.05f * sin(PI * (8.0 * u + 4.0 * v + 2.0 * t));

    float s = r1 + r2 * cos(PI * v);
    result.x = s * sin(PI * u);
    result.y = r2 * sin(PI * v);
    result.z = s * cos(PI * u);
    return result;
}

KERNEL_FUNCTION(Wave)
KERNEL_FUNCTION(MultiWave)
KERNEL_FUNCTION(Ripple)
KERNEL_FUNCTION(Sphere)
KERNEL_FUNCTION(PerturbSphere)
KERNEL_FUNCTION(Torus)
KERNEL_FUNCTION(PerturbTorus)

KERNEL_MOPH_FUNCTION(Wave, MultiWave)
KERNEL_MOPH_FUNCTION(Wave, Ripple)
KERNEL_MOPH_FUNCTION(Wave, Sphere)
KERNEL_MOPH_FUNCTION(Wave, PerturbSphere)
KERNEL_MOPH_FUNCTION(Wave, Torus)
KERNEL_MOPH_FUNCTION(Wave, PerturbTorus)

KERNEL_MOPH_FUNCTION(MultiWave, Wave)
KERNEL_MOPH_FUNCTION(MultiWave, Ripple)
KERNEL_MOPH_FUNCTION(MultiWave, Sphere)
KERNEL_MOPH_FUNCTION(MultiWave, PerturbSphere)
KERNEL_MOPH_FUNCTION(MultiWave, Torus)
KERNEL_MOPH_FUNCTION(MultiWave, PerturbTorus)

KERNEL_MOPH_FUNCTION(Ripple, Wave)
KERNEL_MOPH_FUNCTION(Ripple, MultiWave)
KERNEL_MOPH_FUNCTION(Ripple, Sphere)
KERNEL_MOPH_FUNCTION(Ripple, PerturbSphere)
KERNEL_MOPH_FUNCTION(Ripple, Torus)
KERNEL_MOPH_FUNCTION(Ripple, PerturbTorus)

KERNEL_MOPH_FUNCTION(Sphere, Wave)
KERNEL_MOPH_FUNCTION(Sphere, MultiWave)
KERNEL_MOPH_FUNCTION(Sphere, Ripple)
KERNEL_MOPH_FUNCTION(Sphere, PerturbSphere)
KERNEL_MOPH_FUNCTION(Sphere, Torus)
KERNEL_MOPH_FUNCTION(Sphere, PerturbTorus)

KERNEL_MOPH_FUNCTION(PerturbSphere, Wave)
KERNEL_MOPH_FUNCTION(PerturbSphere, MultiWave)
KERNEL_MOPH_FUNCTION(PerturbSphere, Ripple)
KERNEL_MOPH_FUNCTION(PerturbSphere, Sphere)
KERNEL_MOPH_FUNCTION(PerturbSphere, Torus)
KERNEL_MOPH_FUNCTION(PerturbSphere, PerturbTorus)

KERNEL_MOPH_FUNCTION(Torus, Wave)
KERNEL_MOPH_FUNCTION(Torus, MultiWave)
KERNEL_MOPH_FUNCTION(Torus, Ripple)
KERNEL_MOPH_FUNCTION(Torus, Sphere)
KERNEL_MOPH_FUNCTION(Torus, PerturbSphere)
KERNEL_MOPH_FUNCTION(Torus, PerturbTorus)


KERNEL_MOPH_FUNCTION(PerturbTorus, Wave)
KERNEL_MOPH_FUNCTION(PerturbTorus, MultiWave)
KERNEL_MOPH_FUNCTION(PerturbTorus, Ripple)
KERNEL_MOPH_FUNCTION(PerturbTorus, Sphere)
KERNEL_MOPH_FUNCTION(PerturbTorus, PerturbSphere)
KERNEL_MOPH_FUNCTION(PerturbTorus, Torus)
